-- -o
pevaluate "(\\x : Bool -> x)"
pevaluate "(\\x : Bool -> True)"
pevaluate "(\\x : Bool -o Bool -> x True)"
pevaluate "(\\x : Bool -o Bool -> x True) (\\x : Bool -> x)"
pevaluate "(\\x : Bool -o Bool -> (\\y : Bool -> y)) (\\x : Bool -> x)"
pevaluate "(\\x : Bool -o Bool -> (\\y : Bool -> y)) (\\x : Bool -> x) True"
pevaluate "(\\x : Bool -o Bool -> (\\y : Bool -> y)) (\\x : Bool -> x) True"
-- *
pevaluate "<True * False>"
pevaluate "let x * y = <True * False> in <(\\x : Bool -> False) x * y>"
pevaluate "let x * y = <True * False> in (\\x : Bool -> False) x"
pevaluate "let x * y = <True * False> in (\\x : Bool -> False) x"
pevaluate "let x * y = <(\\x : Bool -> True) * False> in x y"
pevaluate "let x * y = <(\\x : Bool -> True) * False> in x"
pevaluate "let x * y = <(\\x : Bool -> True) * False> in y"
-- 1
pevaluate "<>"
pevaluate "let _ = <> in True"
pevaluate "let _ = (\\x : Bool -> <>) False in <>"
pevaluate "let _ = (\\x : Bool -> <>) False in False"
-- &
pevaluate "<True & False>"
pevaluate "< (\\x : Bool -> x) & False>"
pevaluate "fst < (\\x : Bool -> x) & False>"
pevaluate "snd < (\\x : Bool -> x) & False>"
-- +
pevaluate "inl True : 1"
pevaluate "inl True : Bool"
pevaluate "inr 1 : True"
pevaluate "inr Bool : <>"
pevaluate "case inl True : Bool of inl b => True | inr f => True"
-- !
pevaluate "!True"
pevaluate "let !x = (!True) in (\\x : Bool * Bool -> x)"
pevaluate "let !x = (!True) in < x * x >"
pevaluate "let x = !True in < x & x >"
-- the rest
pevaluate "True"
pevaluate "False"
pevaluate "if True then False else True"
