data List a = Nil | Cons (a * List a);


insert :: forall a . (a -o List a);
insert b = Cons ( b , Nil );

concat :: forall a . (List a -o (List a -o List a));
concat b c = case c of 
      Nil  -> b
    | Cons d -> 
        let e*f = d in Cons ( e , concat f b );

map :: forall a b . ((! (a -o b)) -o (List a -o List b));
map c d = case d of 
      Nil  -> 
        let !e = c in Nil
    | Cons f -> 
        let g*h = f in 
            let !i = c in Cons ( i g , map ! (Î»bik -o i bik) h );


