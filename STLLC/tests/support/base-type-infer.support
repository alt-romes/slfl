a = (λa -o (λb -o let c*d = b in a c d));
b = (λa -o (λb -o (λc -o a < b * c >)));
c = (λa -o < (λb -o fst (a b)) & (λe -o snd (a e)) >);
d = (λa -o (λb -o < (fst a) b & (snd a) b >));
e = (λa -o < (λb -o a inl b ) & (λd -o a inr d ) >);
f = (λa -o (λb -o case b of
              inl c => (fst a) c
            | inr d => (snd a) d));
g = (λa -o let !b = a in < ! fst b * ! snd b >);
h = (λa -o
    let b*c = a in
        let !d = c in
            let !e = b in ! < e & d >);
i = (λa -o let b*c = a in let _ = c in b);
j = (λa -o < a * <> >);
k = (λa -o fst a);
l = (λa -o < a & a >);
