a :: ((A -> (B -> C)) -> ((A * B) -> C));
a a b = let c*d = b in a c d;

b :: (((A * B) -> C) -> (A -> (B -> C)));
b a b c = a (b, c);

c :: ((A -> (B & C)) -> ((A -> B) & (A -> C)));
c a = ( (位b -> (fst (a b))) | (位e -> (snd (a e))) );

d :: (((A -> B) & (A -> C)) -> (A -> (B & C)));
d a b = ( (fst a) b | (snd a) b );

e :: (((A + B) -> C) -> ((A -> C) & (B -> C)));
e a = ( (位b -> a inl b) | (位d -> a inr d) );

f :: (((A -> C) & (B -> C)) -> ((A + B) -> C));
f a b = case b of 
      inl c -> (fst a) c
    | inr d -> (snd a) d;

g :: (!(A & B) -> (!A * !B));
g a = let !b = a in ((!(fst b)), (!(snd b)));

h :: ((!A * !B) -> !(A & B));
h a = let b*c = a in 
    let !d = c in 
        let !e = b in (!( e | d ));

i :: ((A * 1) -> A);
i a = let b*c = a in 
    let _ = c in b;

j :: (A -> (A * 1));
j a = (a, ());

k :: ((A & A) -> A);
k a = (fst a);

l :: (A -> (A & A));
l a = ( a | a );


